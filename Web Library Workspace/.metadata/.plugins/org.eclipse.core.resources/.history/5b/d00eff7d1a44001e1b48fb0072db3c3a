package com.library.webapp.jpaTest;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;


import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.boot.test.autoconfigure.orm.jpa.TestEntityManager;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.support.AnnotationConfigContextLoader;

import com.library.webapp.config.H2Config;
import com.library.webapp.entity.Author;

@DataJpaTest
@ContextConfiguration(
		  classes = { H2Config.class }, 
		  loader = AnnotationConfigContextLoader.class)
class AuthorJpaTest {

	@Autowired
	private TestEntityManager entityManager;
	
	@Test
	void testjpaMapping() {
		Author saved = entityManager.persistAndFlush(new Author(null ,"firstName", "lastName", null));
		
		assertThat(saved.getFirstName()).isEqualTo("firstName");
		assertThat(saved.getLastName()).isEqualTo("lastName");
		assertThat(saved.getId()).isNotNull();
		assertThat(saved.getId()).isPositive();	
	}
	
	@Test
	void testAutoincrementID() {
		Author author1 = entityManager.persistAndFlush(new Author(null ,"firstName1", "lastName1", null));
		Author author2 = entityManager.persistAndFlush(new Author(null ,"firstName2", "lastName2", null));
		
		assertThat(author1.getId()).isNotNull();
		assertThat(author2.getId()).isNotNull();
		assertThat(author2.getId()).isGreaterThan(author1.getId());	
	}

	@Test
	void test2AuthorNotEqual(){
		/* l'id viene generato automaticamente da hibernate. 
		 * Consideriamo ora il contesto in cui non abbiamo ancora salvato le nostre entità
		 * nel DB. */
		Author author1 = new Author(null, "Agatha", "Christie", null);
		Author author2 = new Author(null, "George", "Orwell", null);
		assertFalse(author1.equals(author2));
	}
	
	@Test
	void test2AuthorNotEqual_persist() {
		/* l'id viene generato automaticamente da hibernate. 
		 * Consideriamo ora il contesto in cui abbiamo salvato le nostre entità
		 * nel DB: 
		 * Risultano diversi perchè con il nome diverso, non dipende dall'id.
		 * Hash code si basa sul nome dell'autore. */
		Author result1 = entityManager.persistAndFlush(new Author(null, "Agatha", "Christie", null));
		Author result2 = entityManager.persistAndFlush(new Author(null, "George", "Orwell", null));
		assertFalse(result1.equals(result2));
	}
	
	@Test
	void test2AuthorEqual_OneAuthorPersist() {
		/*Gli autori con lo stesso nome, devono essere uguali. L'autore si distingue dal nome.
		 * È stata comunque inserita la chiave nel db generata.
		 * Consideriamo il caso dello stesso autore, uno salvato (quindi con id) e l'altro no.
		 * Devono risultare uguali.*/
		Author result = entityManager.persistAndFlush(new Author(null, "Agatha", "Christie", null));
		Author author = new Author(null, "Agatha", "Christie", null);
		assertTrue(result.equals(author));
	} 
	
	@Test
	void test2AuthorEqual_AllPersist() {
		/* Secondo la nostra logica, se inseriamo due autori con lo stessso nome , ma id diverso
		 * risulta essere lo stesso autore.
		 * Questo caso non dovrebbe essere permesso nell'inserimento (se è presente lo stesso nome, 
		 * si aggiunge il libro inserito e non si crea un nuovo autore.)  
		 * Perchè mantenere la chiave primaria generata?
		 * Tieni presente che anche quando hai identificato una chiave naturale, ti consigliamo comunque 
		 * di utilizzare una chiave surrogata generata nelle chiavi esterne,
		 * poiché questo rende il tuo modello di dati molto più facile da modificare.
		 * dalla documentazione di hibernate*/
		Author result1 = entityManager.persistAndFlush(new Author(null, "Agatha", "Christie", null));
		Author result2 = entityManager.persistAndFlush(new Author(null, "Agatha", "Christie", null));
		assertTrue(result1.equals(result2));
	}
	
}
